/*							-- DO NOT EDIT --
 * Generated by smidump version 0.4.3-pre1:
 *   smidump -f scli ATM-MIB
 *
 * Derived from ATM-MIB:
 *   This is the MIB Module for ATM and AAL5-related
 *   objects for managing ATM interfaces, ATM virtual
 *   links, ATM cross-connects, AAL5 entities, and
 *   and AAL5 connections.
 *
 * Revision 1998-10-19 12:00:
 *   The initial revision of this module was published
 *   as RFC 1695. Key revisions include:
 *   o  Textual Conventions and OBJECT IDENTITIES have
 *      been moved to a separate MIB module.
 *   o  Applicability of objects to PVCs, SVCs and Soft
 *      PVCs has been clarified.
 *   o  DEFVAL clauses have been added.
 *   o  The relationship of ifIndex values with different
 *      layers and sublayers related to ATM has been
 *      clarified.
 *   o  atmTrafficQosClass has been deprecated
 *      and replaced with atmServiceCategory.
 *   o  atmInterfaceCurrentMaxVpiBits and
 *      atmInterfaceCurrentMaxVciBits have been added with
 *      a description on their relationship with other
 *      objects.
 *   o  atmInterfaceAddressType and atmInterfaceAdminAddress
 *      have been deprecated and replaced by
 *      atmInterfaceSubscrAddress.
 *   o  atmInterfaceTCAlarmState has been clarified.
 *   o  atmTrafficDescrParamIndexNext has been introduced
 *      in order to provide a manager a free
 *      atmTrafficDescrParamIndex value.
 *   o  The atmTrafficFrameDiscard capability has been added.
 *   o  A connection topology type (atmVpl/VclCastType) and
 *      a call control type (atmVpl/VclConnKind) have been
 *      added.
 *   o  aal2 has been added to atmVccAalType.
 *
 * Revision 1994-06-07 22:45:
 *   The RFC1695 version of this MIB module.
 *
 * $Id$
 */

#ifndef _ATM_MIB_H_
#define _ATM_MIB_H_

#include "gsnmp.h"

G_BEGIN_DECLS

/*
 * Tables to map enumerations to strings and vice versa.
 */

#define ATM_MIB_ATMINTERFACEADDRESSTYPE_PRIVATE    1
#define ATM_MIB_ATMINTERFACEADDRESSTYPE_NSAPE164   2
#define ATM_MIB_ATMINTERFACEADDRESSTYPE_NATIVEE164 3
#define ATM_MIB_ATMINTERFACEADDRESSTYPE_OTHER      4

extern GNetSnmpEnum const atm_mib_enums_atmInterfaceAddressType[];

#define ATM_MIB_ATMINTERFACEDS3PLCPALARMSTATE_NOALARM             1
#define ATM_MIB_ATMINTERFACEDS3PLCPALARMSTATE_RECEIVEDFARENDALARM 2
#define ATM_MIB_ATMINTERFACEDS3PLCPALARMSTATE_INCOMINGLOF         3

extern GNetSnmpEnum const atm_mib_enums_atmInterfaceDs3PlcpAlarmState[];

#define ATM_MIB_ATMINTERFACETCALARMSTATE_NOALARM    1
#define ATM_MIB_ATMINTERFACETCALARMSTATE_LCDFAILURE 2

extern GNetSnmpEnum const atm_mib_enums_atmInterfaceTCAlarmState[];

#define ATM_MIB_ATMVCCAALTYPE_AAL1    1
#define ATM_MIB_ATMVCCAALTYPE_AAL34   2
#define ATM_MIB_ATMVCCAALTYPE_AAL5    3
#define ATM_MIB_ATMVCCAALTYPE_OTHER   4
#define ATM_MIB_ATMVCCAALTYPE_UNKNOWN 5
#define ATM_MIB_ATMVCCAALTYPE_AAL2    6

extern GNetSnmpEnum const atm_mib_enums_atmVccAalType[];

#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE_VCMULTIPLEXROUTEDPROTOCOL      1
#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE_VCMULTIPLEXBRIDGEDPROTOCOL8023 2
#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE_VCMULTIPLEXBRIDGEDPROTOCOL8025 3
#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE_VCMULTIPLEXBRIDGEDPROTOCOL8026 4
#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE_VCMULTIPLEXLANEMULATION8023    5
#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE_VCMULTIPLEXLANEMULATION8025    6
#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE_LLCENCAPSULATION               7
#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE_MULTIPROTOCOLFRAMERELAYSSCS    8
#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE_OTHER                          9
#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE_UNKNOWN                        10

extern GNetSnmpEnum const atm_mib_enums_atmVccAal5EncapsType[];


/*
 * C type definitions for ATM-MIB::atmMIBObjects.
 */

#define ATM_MIB_ATMVPCROSSCONNECTINDEXNEXT    (1 << 0) 
#define ATM_MIB_ATMVCCROSSCONNECTINDEXNEXT    (1 << 1) 
#define ATM_MIB_ATMTRAFFICDESCRPARAMINDEXNEXT (1 << 2) 

typedef struct {
    gint32   *atmVpCrossConnectIndexNext;        /* ro */
    gint32   *atmVcCrossConnectIndexNext;        /* ro */
    gint32   *atmTrafficDescrParamIndexNext;     /* ro */
} atm_mib_atmMIBObjects_t;

extern atm_mib_atmMIBObjects_t *
atm_mib_new_atmMIBObjects(void);

extern void
atm_mib_get_atmMIBObjects(GNetSnmp *s, atm_mib_atmMIBObjects_t **atmMIBObjects, gint64 mask);

extern void
atm_mib_free_atmMIBObjects(atm_mib_atmMIBObjects_t *atmMIBObjects);

/*
 * C type definitions for ATM-MIB::atmInterfaceConfEntry.
 */

#define ATM_MIB_ATMINTERFACEMAXVPCS             (1 << 0) 
#define ATM_MIB_ATMINTERFACEMAXVCCS             (1 << 1) 
#define ATM_MIB_ATMINTERFACECONFVPCS            (1 << 2) 
#define ATM_MIB_ATMINTERFACECONFVCCS            (1 << 3) 
#define ATM_MIB_ATMINTERFACEMAXACTIVEVPIBITS    (1 << 4) 
#define ATM_MIB_ATMINTERFACEMAXACTIVEVCIBITS    (1 << 5) 
#define ATM_MIB_ATMINTERFACEILMIVPI             (1 << 6) 
#define ATM_MIB_ATMINTERFACEILMIVCI             (1 << 7) 
#define ATM_MIB_ATMINTERFACEADDRESSTYPE         (1 << 8) 
#define ATM_MIB_ATMINTERFACEADMINADDRESS        (1 << 9) 
#define ATM_MIB_ATMINTERFACEMYNEIGHBORIPADDRESS (1 << 10) 
#define ATM_MIB_ATMINTERFACEMYNEIGHBORIFNAME    (1 << 11) 
#define ATM_MIB_ATMINTERFACECURRENTMAXVPIBITS   (1 << 12) 
#define ATM_MIB_ATMINTERFACECURRENTMAXVCIBITS   (1 << 13) 
#define ATM_MIB_ATMINTERFACESUBSCRADDRESS       (1 << 14) 

typedef struct {
    gint32   ifIndex;                              /* ro IF-MIB::InterfaceIndex */
    gint32   *atmInterfaceMaxVpcs;                 /* rw */
    gint32   *atmInterfaceMaxVccs;                 /* rw */
    gint32   *atmInterfaceConfVpcs;                /* ro */
    gint32   *atmInterfaceConfVccs;                /* ro */
    gint32   *atmInterfaceMaxActiveVpiBits;        /* rw */
    gint32   *atmInterfaceMaxActiveVciBits;        /* rw */
    gint32   *atmInterfaceIlmiVpi;                 /* rw ATM-TC-MIB::AtmVpIdentifier */
    gint32   *atmInterfaceIlmiVci;                 /* rw ATM-TC-MIB::AtmVcIdentifier */
    gint32   *atmInterfaceAddressType;             /* ro */
    guchar   *atmInterfaceAdminAddress;            /* ro ATM-TC-MIB::AtmAddr */
#define ATM_MIB_ATMINTERFACEADMINADDRESSMINLENGTH 0
#define ATM_MIB_ATMINTERFACEADMINADDRESSMAXLENGTH 40
    guint16  _atmInterfaceAdminAddressLength;
    guchar   *atmInterfaceMyNeighborIpAddress;     /* rw SNMPv2-SMI::IpAddress */
#define ATM_MIB_ATMINTERFACEMYNEIGHBORIPADDRESSLENGTH 4
    guchar   *atmInterfaceMyNeighborIfName;        /* rw SNMPv2-TC::DisplayString */
#define ATM_MIB_ATMINTERFACEMYNEIGHBORIFNAMEMINLENGTH 0
#define ATM_MIB_ATMINTERFACEMYNEIGHBORIFNAMEMAXLENGTH 255
    guint16  _atmInterfaceMyNeighborIfNameLength;
    gint32   *atmInterfaceCurrentMaxVpiBits;       /* ro */
    gint32   *atmInterfaceCurrentMaxVciBits;       /* ro */
    guchar   *atmInterfaceSubscrAddress;           /* rw ATM-TC-MIB::AtmAddr */
#define ATM_MIB_ATMINTERFACESUBSCRADDRESSMINLENGTH 0
#define ATM_MIB_ATMINTERFACESUBSCRADDRESSMAXLENGTH 40
    guint16  _atmInterfaceSubscrAddressLength;
} atm_mib_atmInterfaceConfEntry_t;

extern void
atm_mib_get_atmInterfaceConfTable(GNetSnmp *s, atm_mib_atmInterfaceConfEntry_t ***atmInterfaceConfEntry, gint64 mask);

extern void
atm_mib_free_atmInterfaceConfTable(atm_mib_atmInterfaceConfEntry_t **atmInterfaceConfEntry);

extern atm_mib_atmInterfaceConfEntry_t *
atm_mib_new_atmInterfaceConfEntry(void);

extern void
atm_mib_get_atmInterfaceConfEntry(GNetSnmp *s, atm_mib_atmInterfaceConfEntry_t **atmInterfaceConfEntry, gint32 ifIndex, gint64 mask);

extern void
atm_mib_set_atmInterfaceConfEntry(GNetSnmp *s, atm_mib_atmInterfaceConfEntry_t *atmInterfaceConfEntry, gint64 mask);

extern void
atm_mib_free_atmInterfaceConfEntry(atm_mib_atmInterfaceConfEntry_t *atmInterfaceConfEntry);

/*
 * C type definitions for ATM-MIB::atmInterfaceDs3PlcpEntry.
 */

#define ATM_MIB_ATMINTERFACEDS3PLCPSEFSS      (1 << 0) 
#define ATM_MIB_ATMINTERFACEDS3PLCPALARMSTATE (1 << 1) 
#define ATM_MIB_ATMINTERFACEDS3PLCPUASS       (1 << 2) 

typedef struct {
    gint32   ifIndex;                            /* ro IF-MIB::InterfaceIndex */
    guint32  *atmInterfaceDs3PlcpSEFSs;          /* ro SNMPv2-SMI::Counter32 */
    gint32   *atmInterfaceDs3PlcpAlarmState;     /* ro */
    guint32  *atmInterfaceDs3PlcpUASs;           /* ro SNMPv2-SMI::Counter32 */
} atm_mib_atmInterfaceDs3PlcpEntry_t;

extern void
atm_mib_get_atmInterfaceDs3PlcpTable(GNetSnmp *s, atm_mib_atmInterfaceDs3PlcpEntry_t ***atmInterfaceDs3PlcpEntry, gint64 mask);

extern void
atm_mib_free_atmInterfaceDs3PlcpTable(atm_mib_atmInterfaceDs3PlcpEntry_t **atmInterfaceDs3PlcpEntry);

extern atm_mib_atmInterfaceDs3PlcpEntry_t *
atm_mib_new_atmInterfaceDs3PlcpEntry(void);

extern void
atm_mib_get_atmInterfaceDs3PlcpEntry(GNetSnmp *s, atm_mib_atmInterfaceDs3PlcpEntry_t **atmInterfaceDs3PlcpEntry, gint32 ifIndex, gint64 mask);

extern void
atm_mib_free_atmInterfaceDs3PlcpEntry(atm_mib_atmInterfaceDs3PlcpEntry_t *atmInterfaceDs3PlcpEntry);

/*
 * C type definitions for ATM-MIB::atmInterfaceTCEntry.
 */

#define ATM_MIB_ATMINTERFACEOCDEVENTS    (1 << 0) 
#define ATM_MIB_ATMINTERFACETCALARMSTATE (1 << 1) 

typedef struct {
    gint32   ifIndex;                       /* ro IF-MIB::InterfaceIndex */
    guint32  *atmInterfaceOCDEvents;        /* ro SNMPv2-SMI::Counter32 */
    gint32   *atmInterfaceTCAlarmState;     /* ro */
} atm_mib_atmInterfaceTCEntry_t;

extern void
atm_mib_get_atmInterfaceTCTable(GNetSnmp *s, atm_mib_atmInterfaceTCEntry_t ***atmInterfaceTCEntry, gint64 mask);

extern void
atm_mib_free_atmInterfaceTCTable(atm_mib_atmInterfaceTCEntry_t **atmInterfaceTCEntry);

extern atm_mib_atmInterfaceTCEntry_t *
atm_mib_new_atmInterfaceTCEntry(void);

extern void
atm_mib_get_atmInterfaceTCEntry(GNetSnmp *s, atm_mib_atmInterfaceTCEntry_t **atmInterfaceTCEntry, gint32 ifIndex, gint64 mask);

extern void
atm_mib_free_atmInterfaceTCEntry(atm_mib_atmInterfaceTCEntry_t *atmInterfaceTCEntry);

/*
 * C type definitions for ATM-MIB::atmTrafficDescrParamEntry.
 */

#define ATM_MIB_ATMTRAFFICDESCRTYPE      (1 << 0) 
#define ATM_MIB_ATMTRAFFICDESCRPARAM1    (1 << 1) 
#define ATM_MIB_ATMTRAFFICDESCRPARAM2    (1 << 2) 
#define ATM_MIB_ATMTRAFFICDESCRPARAM3    (1 << 3) 
#define ATM_MIB_ATMTRAFFICDESCRPARAM4    (1 << 4) 
#define ATM_MIB_ATMTRAFFICDESCRPARAM5    (1 << 5) 
#define ATM_MIB_ATMTRAFFICQOSCLASS       (1 << 6) 
#define ATM_MIB_ATMTRAFFICDESCRROWSTATUS (1 << 7) 
#define ATM_MIB_ATMSERVICECATEGORY       (1 << 8) 
#define ATM_MIB_ATMTRAFFICFRAMEDISCARD   (1 << 9) 

typedef struct {
    gint32   atmTrafficDescrParamIndex;     /* na */
    guint32  *atmTrafficDescrType;          /* rw ObjectIdentifier */
#define ATM_MIB_ATMTRAFFICDESCRTYPEMINLENGTH 0
#define ATM_MIB_ATMTRAFFICDESCRTYPEMAXLENGTH 128
    guint16  _atmTrafficDescrTypeLength;
    gint32   *atmTrafficDescrParam1;        /* rw Integer32 */
    gint32   *atmTrafficDescrParam2;        /* rw Integer32 */
    gint32   *atmTrafficDescrParam3;        /* rw Integer32 */
    gint32   *atmTrafficDescrParam4;        /* rw Integer32 */
    gint32   *atmTrafficDescrParam5;        /* rw Integer32 */
    gint32   *atmTrafficQoSClass;           /* rw */
    gint32   *atmTrafficDescrRowStatus;     /* rw SNMPv2-TC::RowStatus */
    gint32   *atmServiceCategory;           /* rw ATM-TC-MIB::AtmServiceCategory */
    gint32   *atmTrafficFrameDiscard;       /* rw SNMPv2-TC::TruthValue */
} atm_mib_atmTrafficDescrParamEntry_t;

extern void
atm_mib_get_atmTrafficDescrParamTable(GNetSnmp *s, atm_mib_atmTrafficDescrParamEntry_t ***atmTrafficDescrParamEntry, gint64 mask);

extern void
atm_mib_free_atmTrafficDescrParamTable(atm_mib_atmTrafficDescrParamEntry_t **atmTrafficDescrParamEntry);

extern atm_mib_atmTrafficDescrParamEntry_t *
atm_mib_new_atmTrafficDescrParamEntry(void);

extern void
atm_mib_get_atmTrafficDescrParamEntry(GNetSnmp *s, atm_mib_atmTrafficDescrParamEntry_t **atmTrafficDescrParamEntry, gint32 atmTrafficDescrParamIndex, gint64 mask);

extern void
atm_mib_set_atmTrafficDescrParamEntry(GNetSnmp *s, atm_mib_atmTrafficDescrParamEntry_t *atmTrafficDescrParamEntry, gint64 mask);

extern void
atm_mib_free_atmTrafficDescrParamEntry(atm_mib_atmTrafficDescrParamEntry_t *atmTrafficDescrParamEntry);

/*
 * C type definitions for ATM-MIB::atmVplEntry.
 */

#define ATM_MIB_ATMVPLADMINSTATUS               (1 << 0) 
#define ATM_MIB_ATMVPLOPERSTATUS                (1 << 1) 
#define ATM_MIB_ATMVPLLASTCHANGE                (1 << 2) 
#define ATM_MIB_ATMVPLRECEIVETRAFFICDESCRINDEX  (1 << 3) 
#define ATM_MIB_ATMVPLTRANSMITTRAFFICDESCRINDEX (1 << 4) 
#define ATM_MIB_ATMVPLCROSSCONNECTIDENTIFIER    (1 << 5) 
#define ATM_MIB_ATMVPLROWSTATUS                 (1 << 6) 
#define ATM_MIB_ATMVPLCASTTYPE                  (1 << 7) 
#define ATM_MIB_ATMVPLCONNKIND                  (1 << 8) 

typedef struct {
    gint32   ifIndex;                              /* ro IF-MIB::InterfaceIndex */
    gint32   atmVplVpi;                            /* na ATM-TC-MIB::AtmVpIdentifier */
    gint32   *atmVplAdminStatus;                   /* rw ATM-TC-MIB::AtmVorXAdminStatus */
    gint32   *atmVplOperStatus;                    /* ro ATM-TC-MIB::AtmVorXOperStatus */
    guint32  *atmVplLastChange;                    /* ro ATM-TC-MIB::AtmVorXLastChange */
    gint32   *atmVplReceiveTrafficDescrIndex;      /* rw ATM-TC-MIB::AtmTrafficDescrParamIndex */
    gint32   *atmVplTransmitTrafficDescrIndex;     /* rw ATM-TC-MIB::AtmTrafficDescrParamIndex */
    gint32   *atmVplCrossConnectIdentifier;        /* ro */
    gint32   *atmVplRowStatus;                     /* rw SNMPv2-TC::RowStatus */
    gint32   *atmVplCastType;                      /* rw ATM-TC-MIB::AtmConnCastType */
    gint32   *atmVplConnKind;                      /* rw ATM-TC-MIB::AtmConnKind */
} atm_mib_atmVplEntry_t;

extern void
atm_mib_get_atmVplTable(GNetSnmp *s, atm_mib_atmVplEntry_t ***atmVplEntry, gint64 mask);

extern void
atm_mib_free_atmVplTable(atm_mib_atmVplEntry_t **atmVplEntry);

extern atm_mib_atmVplEntry_t *
atm_mib_new_atmVplEntry(void);

extern void
atm_mib_get_atmVplEntry(GNetSnmp *s, atm_mib_atmVplEntry_t **atmVplEntry, gint32 ifIndex, gint32 atmVplVpi, gint64 mask);

extern void
atm_mib_set_atmVplEntry(GNetSnmp *s, atm_mib_atmVplEntry_t *atmVplEntry, gint64 mask);

extern void
atm_mib_free_atmVplEntry(atm_mib_atmVplEntry_t *atmVplEntry);

/*
 * C type definitions for ATM-MIB::atmVclEntry.
 */

#define ATM_MIB_ATMVCLADMINSTATUS               (1 << 0) 
#define ATM_MIB_ATMVCLOPERSTATUS                (1 << 1) 
#define ATM_MIB_ATMVCLLASTCHANGE                (1 << 2) 
#define ATM_MIB_ATMVCLRECEIVETRAFFICDESCRINDEX  (1 << 3) 
#define ATM_MIB_ATMVCLTRANSMITTRAFFICDESCRINDEX (1 << 4) 
#define ATM_MIB_ATMVCCAALTYPE                   (1 << 5) 
#define ATM_MIB_ATMVCCAAL5CPCSTRANSMITSDUSIZE   (1 << 6) 
#define ATM_MIB_ATMVCCAAL5CPCSRECEIVESDUSIZE    (1 << 7) 
#define ATM_MIB_ATMVCCAAL5ENCAPSTYPE            (1 << 8) 
#define ATM_MIB_ATMVCLCROSSCONNECTIDENTIFIER    (1 << 9) 
#define ATM_MIB_ATMVCLROWSTATUS                 (1 << 10) 
#define ATM_MIB_ATMVCLCASTTYPE                  (1 << 11) 
#define ATM_MIB_ATMVCLCONNKIND                  (1 << 12) 

typedef struct {
    gint32   ifIndex;                              /* ro IF-MIB::InterfaceIndex */
    gint32   atmVclVpi;                            /* na ATM-TC-MIB::AtmVpIdentifier */
    gint32   atmVclVci;                            /* na ATM-TC-MIB::AtmVcIdentifier */
    gint32   *atmVclAdminStatus;                   /* rw ATM-TC-MIB::AtmVorXAdminStatus */
    gint32   *atmVclOperStatus;                    /* ro ATM-TC-MIB::AtmVorXOperStatus */
    guint32  *atmVclLastChange;                    /* ro ATM-TC-MIB::AtmVorXLastChange */
    gint32   *atmVclReceiveTrafficDescrIndex;      /* rw ATM-TC-MIB::AtmTrafficDescrParamIndex */
    gint32   *atmVclTransmitTrafficDescrIndex;     /* rw ATM-TC-MIB::AtmTrafficDescrParamIndex */
    gint32   *atmVccAalType;                       /* rw */
    gint32   *atmVccAal5CpcsTransmitSduSize;       /* rw */
    gint32   *atmVccAal5CpcsReceiveSduSize;        /* rw */
    gint32   *atmVccAal5EncapsType;                /* rw */
    gint32   *atmVclCrossConnectIdentifier;        /* ro */
    gint32   *atmVclRowStatus;                     /* rw SNMPv2-TC::RowStatus */
    gint32   *atmVclCastType;                      /* rw ATM-TC-MIB::AtmConnCastType */
    gint32   *atmVclConnKind;                      /* rw ATM-TC-MIB::AtmConnKind */
} atm_mib_atmVclEntry_t;

extern void
atm_mib_get_atmVclTable(GNetSnmp *s, atm_mib_atmVclEntry_t ***atmVclEntry, gint64 mask);

extern void
atm_mib_free_atmVclTable(atm_mib_atmVclEntry_t **atmVclEntry);

extern atm_mib_atmVclEntry_t *
atm_mib_new_atmVclEntry(void);

extern void
atm_mib_get_atmVclEntry(GNetSnmp *s, atm_mib_atmVclEntry_t **atmVclEntry, gint32 ifIndex, gint32 atmVclVpi, gint32 atmVclVci, gint64 mask);

extern void
atm_mib_set_atmVclEntry(GNetSnmp *s, atm_mib_atmVclEntry_t *atmVclEntry, gint64 mask);

extern void
atm_mib_free_atmVclEntry(atm_mib_atmVclEntry_t *atmVclEntry);

/*
 * C type definitions for ATM-MIB::atmVpCrossConnectEntry.
 */

#define ATM_MIB_ATMVPCROSSCONNECTADMINSTATUS   (1 << 0) 
#define ATM_MIB_ATMVPCROSSCONNECTL2HOPERSTATUS (1 << 1) 
#define ATM_MIB_ATMVPCROSSCONNECTH2LOPERSTATUS (1 << 2) 
#define ATM_MIB_ATMVPCROSSCONNECTL2HLASTCHANGE (1 << 3) 
#define ATM_MIB_ATMVPCROSSCONNECTH2LLASTCHANGE (1 << 4) 
#define ATM_MIB_ATMVPCROSSCONNECTROWSTATUS     (1 << 5) 

typedef struct {
    gint32   atmVpCrossConnectIndex;              /* na */
    gint32   atmVpCrossConnectLowIfIndex;         /* na IF-MIB::InterfaceIndex */
    gint32   atmVpCrossConnectLowVpi;             /* na ATM-TC-MIB::AtmVpIdentifier */
    gint32   atmVpCrossConnectHighIfIndex;        /* na IF-MIB::InterfaceIndex */
    gint32   atmVpCrossConnectHighVpi;            /* na ATM-TC-MIB::AtmVpIdentifier */
    gint32   *atmVpCrossConnectAdminStatus;       /* rw ATM-TC-MIB::AtmVorXAdminStatus */
    gint32   *atmVpCrossConnectL2HOperStatus;     /* ro ATM-TC-MIB::AtmVorXOperStatus */
    gint32   *atmVpCrossConnectH2LOperStatus;     /* ro ATM-TC-MIB::AtmVorXOperStatus */
    guint32  *atmVpCrossConnectL2HLastChange;     /* ro ATM-TC-MIB::AtmVorXLastChange */
    guint32  *atmVpCrossConnectH2LLastChange;     /* ro ATM-TC-MIB::AtmVorXLastChange */
    gint32   *atmVpCrossConnectRowStatus;         /* rw SNMPv2-TC::RowStatus */
} atm_mib_atmVpCrossConnectEntry_t;

extern void
atm_mib_get_atmVpCrossConnectTable(GNetSnmp *s, atm_mib_atmVpCrossConnectEntry_t ***atmVpCrossConnectEntry, gint64 mask);

extern void
atm_mib_free_atmVpCrossConnectTable(atm_mib_atmVpCrossConnectEntry_t **atmVpCrossConnectEntry);

extern atm_mib_atmVpCrossConnectEntry_t *
atm_mib_new_atmVpCrossConnectEntry(void);

extern void
atm_mib_get_atmVpCrossConnectEntry(GNetSnmp *s, atm_mib_atmVpCrossConnectEntry_t **atmVpCrossConnectEntry, gint32 atmVpCrossConnectIndex, gint32 atmVpCrossConnectLowIfIndex, gint32 atmVpCrossConnectLowVpi, gint32 atmVpCrossConnectHighIfIndex, gint32 atmVpCrossConnectHighVpi, gint64 mask);

extern void
atm_mib_set_atmVpCrossConnectEntry(GNetSnmp *s, atm_mib_atmVpCrossConnectEntry_t *atmVpCrossConnectEntry, gint64 mask);

extern void
atm_mib_free_atmVpCrossConnectEntry(atm_mib_atmVpCrossConnectEntry_t *atmVpCrossConnectEntry);

/*
 * C type definitions for ATM-MIB::atmVcCrossConnectEntry.
 */

#define ATM_MIB_ATMVCCROSSCONNECTADMINSTATUS   (1 << 0) 
#define ATM_MIB_ATMVCCROSSCONNECTL2HOPERSTATUS (1 << 1) 
#define ATM_MIB_ATMVCCROSSCONNECTH2LOPERSTATUS (1 << 2) 
#define ATM_MIB_ATMVCCROSSCONNECTL2HLASTCHANGE (1 << 3) 
#define ATM_MIB_ATMVCCROSSCONNECTH2LLASTCHANGE (1 << 4) 
#define ATM_MIB_ATMVCCROSSCONNECTROWSTATUS     (1 << 5) 

typedef struct {
    gint32   atmVcCrossConnectIndex;              /* na */
    gint32   atmVcCrossConnectLowIfIndex;         /* na IF-MIB::InterfaceIndex */
    gint32   atmVcCrossConnectLowVpi;             /* na ATM-TC-MIB::AtmVpIdentifier */
    gint32   atmVcCrossConnectLowVci;             /* na ATM-TC-MIB::AtmVcIdentifier */
    gint32   atmVcCrossConnectHighIfIndex;        /* na IF-MIB::InterfaceIndex */
    gint32   atmVcCrossConnectHighVpi;            /* na ATM-TC-MIB::AtmVpIdentifier */
    gint32   atmVcCrossConnectHighVci;            /* na ATM-TC-MIB::AtmVcIdentifier */
    gint32   *atmVcCrossConnectAdminStatus;       /* rw ATM-TC-MIB::AtmVorXAdminStatus */
    gint32   *atmVcCrossConnectL2HOperStatus;     /* ro ATM-TC-MIB::AtmVorXOperStatus */
    gint32   *atmVcCrossConnectH2LOperStatus;     /* ro ATM-TC-MIB::AtmVorXOperStatus */
    guint32  *atmVcCrossConnectL2HLastChange;     /* ro ATM-TC-MIB::AtmVorXLastChange */
    guint32  *atmVcCrossConnectH2LLastChange;     /* ro ATM-TC-MIB::AtmVorXLastChange */
    gint32   *atmVcCrossConnectRowStatus;         /* rw SNMPv2-TC::RowStatus */
} atm_mib_atmVcCrossConnectEntry_t;

extern void
atm_mib_get_atmVcCrossConnectTable(GNetSnmp *s, atm_mib_atmVcCrossConnectEntry_t ***atmVcCrossConnectEntry, gint64 mask);

extern void
atm_mib_free_atmVcCrossConnectTable(atm_mib_atmVcCrossConnectEntry_t **atmVcCrossConnectEntry);

extern atm_mib_atmVcCrossConnectEntry_t *
atm_mib_new_atmVcCrossConnectEntry(void);

extern void
atm_mib_get_atmVcCrossConnectEntry(GNetSnmp *s, atm_mib_atmVcCrossConnectEntry_t **atmVcCrossConnectEntry, gint32 atmVcCrossConnectIndex, gint32 atmVcCrossConnectLowIfIndex, gint32 atmVcCrossConnectLowVpi, gint32 atmVcCrossConnectLowVci, gint32 atmVcCrossConnectHighIfIndex, gint32 atmVcCrossConnectHighVpi, gint32 atmVcCrossConnectHighVci, gint64 mask);

extern void
atm_mib_set_atmVcCrossConnectEntry(GNetSnmp *s, atm_mib_atmVcCrossConnectEntry_t *atmVcCrossConnectEntry, gint64 mask);

extern void
atm_mib_free_atmVcCrossConnectEntry(atm_mib_atmVcCrossConnectEntry_t *atmVcCrossConnectEntry);

/*
 * C type definitions for ATM-MIB::aal5VccEntry.
 */

#define ATM_MIB_AAL5VCCCRCERRORS     (1 << 0) 
#define ATM_MIB_AAL5VCCSARTIMEOUTS   (1 << 1) 
#define ATM_MIB_AAL5VCCOVERSIZEDSDUS (1 << 2) 

typedef struct {
    gint32   ifIndex;                   /* ro IF-MIB::InterfaceIndex */
    gint32   aal5VccVpi;                /* na ATM-TC-MIB::AtmVpIdentifier */
    gint32   aal5VccVci;                /* na ATM-TC-MIB::AtmVcIdentifier */
    guint32  *aal5VccCrcErrors;         /* ro SNMPv2-SMI::Counter32 */
    guint32  *aal5VccSarTimeOuts;       /* ro SNMPv2-SMI::Counter32 */
    guint32  *aal5VccOverSizedSDUs;     /* ro SNMPv2-SMI::Counter32 */
} atm_mib_aal5VccEntry_t;

extern void
atm_mib_get_aal5VccTable(GNetSnmp *s, atm_mib_aal5VccEntry_t ***aal5VccEntry, gint64 mask);

extern void
atm_mib_free_aal5VccTable(atm_mib_aal5VccEntry_t **aal5VccEntry);

extern atm_mib_aal5VccEntry_t *
atm_mib_new_aal5VccEntry(void);

extern void
atm_mib_get_aal5VccEntry(GNetSnmp *s, atm_mib_aal5VccEntry_t **aal5VccEntry, gint32 ifIndex, gint32 aal5VccVpi, gint32 aal5VccVci, gint64 mask);

extern void
atm_mib_free_aal5VccEntry(atm_mib_aal5VccEntry_t *aal5VccEntry);


G_END_DECLS

#endif /* _ATM_MIB_H_ */
